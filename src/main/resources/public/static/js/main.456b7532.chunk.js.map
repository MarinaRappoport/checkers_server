{"version":3,"sources":["serviceWorker.js","theme.js","containers/Authentication/consts.js","containers/Authentication/reducer.js","containers/Lobby/consts.js","containers/Lobby/reducer.js","containers/Game/consts.js","containers/Game/reducer.js","containers/App/reducer.js","containers/History/consts.js","containers/History/reducer.js","store/reducers.js","containers/App/consts.js","store/middlewares.js","store/index.js","components/PrivateRoute/index.js","libs/HttpClient.js","containers/Game/actions.js","controllers/AuthController.js","libs/SockJsClient.js","controllers/GameIOController.js","containers/Authentication/actions.js","components/TextField/index.js","components/LoginForm/index.js","components/LoginForm/styles.js","components/RegisterForm/index.js","components/RegisterForm/styles.js","containers/Authentication/index.js","containers/Authentication/styles.js","controllers/CheckerUtils.js","controllers/CheckerGame.js","containers/App/actions.js","components/GameBoard/piece.js","components/GameBoard/index.js","components/GameBoard/styles.js","components/GameInfo/PlayerColor.js","components/GameInfo/index.js","components/GameOver/index.js","containers/Game/index.js","containers/Game/styles.js","containers/App/notifier.js","components/UsersList/index.js","components/UsersList/styles.js","controllers/UsersController.js","containers/Lobby/actions.js","containers/Lobby/index.js","containers/Lobby/styles.js","containers/Navbar/index.js","containers/Navbar/styles.js","components/HistoryItem/index.js","containers/History/index.js","containers/History/styles.js","containers/History/actions.js","containers/App/index.js","containers/App/styles.js","index.js"],"names":["Boolean","window","location","hostname","match","theme","createMuiTheme","typography","direction","palette","primary","main","secondary","error","red","A400","background","default","dark","SET_USER","LOGOUT","initState","Immutable","fromJS","isLogin","user","allUsers","board","opponent","username","color","player","currentPlayer","isGameOver","winnerUsername","selectableSquares","selected","notifications","games","combineReducers","form","formReducer","auth","state","action","type","set","payload","lobby","game","setIn","app","key","notification","map","dismissAll","dismissed","filter","history","composeWithDevTools","applyMiddleware","thunk","store","createStore","reducers","middlewares","PrivateRoute","config","redirected","redirectUrl","Component","component","rest","render","props","to","pathname","from","requests","axios","create","baseURL","server","checkerGame","this","savePlayer","setCredentials","bind","login","logout","getCredentials","removeCredentials","password","name","body","post","paths","register","req","data","userId","get","localStorage","getItem","setItem","removeItem","SockJsClient","sock","stompClient","subscribes","isConnected","connect","onConnect","disconnect","send","url","SockJS","Stomp","over","frame","subscribe","link","handler","msg","JSON","parse","path","stringify","sockJSClient","SockJSClient","dispatch","bindedActions","bindAction","invitePlayer","Object","entries","socketListen","handleLink","socketServer","console","log","on","toUser","move","surrender","playerUsername","acceptPlayer","setUser","a","GameIOController","initLogin","AuthController","isCredentialsSaved","_TextField","label","input","meta","touched","invalid","custom","TextField","autoComplete","placeholder","helperText","LoginForm","handleSubmit","pristine","submitting","classes","onSubmit","Grid","container","spacing","item","xs","className","errorMessage","Field","lg","Button","disabled","variant","fullWidth","Link","React","formConfig","validate","values","errors","withStyles","reduxForm","RegisterForm","password_repeat","Authentication","submitRegister","submitLogin","SubmissionError","_error","alignContent","justify","authBox","exact","bindActionCreators","actions","width","border","marginTop","textAlign","paddingBottom","borderRadius","parsePlayerColor","toLocaleLowerCase","toLowerCase","decreasePosition","pos","row","column","increasePosition","comparePoints","p1","p2","isEqual","arrayPointToJson","point","CheckerGame","load","playerColor","playerMoveAction","_isGameOver","gameOver","_winnerColor","winnerColor","_playerColor","_currentTurn","currentPlayerColor","_legalMoves","legalMovesCollection","_board","range","i","push","times","cleanBoard","_selectedSquare","_selectableSquares","_playerMoveAction","_loadPieces","pieces","getBoard","getWinnerColor","getSelectableSquares","getCurrentPlayerColor","getSelectedSquare","selectSquare","_isPlayerTurn","_isSelectableSquare","_moveFromTo","_cleanSelectableSquares","_cleanSelectedSquare","_isCancelingSelected","_isSquareOfPlayer","movesFromPoint","_allMovesFromPoint","_setSelectableSquares","_setSelectedSquare","currentPoint","targetPoint","points","some","p","isPointInList","value","jsonPointToArray","piece","position","king","enqueueSnackbar","options","Date","getTime","Math","random","closeSnackbar","moveAction","getOpponentUsername","gameData","opponentColor","getWinnerUsername","loadGame","AppActions","message","black","userColor","oponnentUsername","defaultStyle","marginLeft","height","kingCrownStyle","Piece","isSelected","onSelect","isKing","style","onClick","GetSquareColor","isSelectableSquare","x","y","size","borderCollapse","borderSpacing","square","cursor","white","optionSquare","opacity","onSelectSquare","squares","classnames","PlayerColor","font","GameInfo","surrend","Table","TableBody","TableRow","TableCell","Divider","confirm","modal","display","alignItems","justifyContent","paper","backgroundColor","boxShadow","shadows","padding","open","onClose","Modal","id","withRouter","game_sidebar","gameContainer","useDispatch","useSelector","displayed","Notifier","useSnackbar","useEffect","forEach","includes","event","reason","myKey","onExited","removeSnackbar","getPlayerInfo","iconClassName","available","classNames","iconAvailable","iconUnavailable","lobbyItem","users","List","aria-labelledby","index","ListItem","button","toJS","ListItemIcon","Person","ListItemText","allPlayers","userName","currentGame","getHistory","fetchAllPlayers","UsersController","fetch_all_users","Lobby","onSelectUser","recivedInvitation","gameStart","checkIfAlreadyInGame","gameInvitation","loggedUser","get_current_game","then","invitation","fromUser","acceptInvitationButton","lobbyBox","UsersList","GameActions","fontWeight","title","flexGrow","AppBar","Toolbar","Typography","userid","getIn","HistoryItem","TableHead","moment","format","gameDate","get_history","App","loginRouteConfig","root","Game","History","authActions","ReactDOM","StrictMode","ThemeProvider","maxSnack","hideIconVariant","preventDuplicate","anchorOrigin","horizontal","vertical","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.456b7532.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { red } from '@material-ui/core/colors';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        \"fontFamily\": \"\\\"Heebo\\\", sans-serif\"\r\n    },\r\n    direction: 'rtl',\r\n    palette: {\r\n        primary: {\r\n            main: '#6634c4',\r\n        },\r\n        secondary: {\r\n            main: '#cccccc',\r\n        },\r\n        error: {\r\n            main: red.A400,\r\n        },\r\n        background: {\r\n            default: '#fff',\r\n        },\r\n        dark: '#868686'\r\n    },\r\n});\r\n\r\nexport default theme;\r\n","export const SET_USER = 'Authentication/SET_USER';\r\nexport const LOGOUT = 'Authentication/LOGOUT';\r\n","import Immutable from 'immutable';\r\nimport { SET_USER, LOGOUT } from './consts';\r\n\r\nconst initState = Immutable.fromJS({\r\n    isLogin: false,\r\n    user: null\r\n});\r\n\r\nexport default function authReducer(state = initState, action) {\r\n    switch(action.type) {\r\n        case SET_USER:\r\n            return (\r\n                state\r\n                    .set('isLogin', true)\r\n                    .set('user', Immutable.fromJS(action.payload))\r\n            );\r\n        case LOGOUT:\r\n            return state.set('isLogin', false).set('user', null);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","export const SET_ALL_USERS = 'Lobby/SET_ALL_USERS';","import Immutable from 'immutable';\r\nimport { SET_ALL_USERS } from './consts';\r\n\r\nconst initState = Immutable.fromJS({\r\n    allUsers: []\r\n});\r\n\r\nexport default function authReducer(state = initState, action) {\r\n    switch(action.type) {\r\n        case SET_ALL_USERS:\r\n            return state.set('allUsers', Immutable.fromJS(action.payload));\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","export const SET_SELECTABLE_SQUARES = 'Game/SET_SELECTABLE_SQUARES';\r\nexport const SET_SELECT_PIECE = 'Game/SET_SELECT_PIECE';\r\nexport const SET_BOARD = 'Game/SET_BOARD';\r\nexport const SET_PLAYER_COLOR = 'Game/SET_PLAYER_COLOR';\r\nexport const SET_IS_GAME_OVER = 'Game/SET_IS_GAME_OVER';\r\nexport const SET_OPPONENT_COLOR = 'Game/SET_OPPONENT_COLOR';\r\nexport const SET_CURRENT_PLAYER_COLOR = 'Game/SET_CURRENT_PLAYER_COLOR';\r\nexport const SET_OPPONENT_NICKNAME = 'Game/SET_OPPONENT_NICKNAME';\r\nexport const SET_WINNER_USERNAME = 'Game/SET_WINNER_USERNAME';\r\n","import { fromJS } from 'immutable';\r\nimport { SET_SELECT_PIECE, SET_BOARD, SET_SELECTABLE_SQUARES, SET_PLAYER_COLOR, SET_OPPONENT_COLOR, SET_CURRENT_PLAYER_COLOR, SET_IS_GAME_OVER, SET_OPPONENT_NICKNAME, SET_WINNER_USERNAME } from './consts';\r\n\r\nconst initState = fromJS({\r\n    board: [],\r\n    opponent: {\r\n        username: '',\r\n        color: '',\r\n    },\r\n    player: {\r\n        color: '',\r\n    },\r\n    currentPlayer: {\r\n        color: ''\r\n    },\r\n    isGameOver: false,\r\n    winnerUsername: '',\r\n    selectableSquares: [],\r\n    selected: []\r\n});\r\n\r\nexport default function gameReducer(state = initState, action) {\r\n    switch (action.type) {\r\n        case SET_BOARD:\r\n            return state.set('board', fromJS(action.payload));\r\n        case SET_SELECT_PIECE:\r\n            return state.set('selected', fromJS(action.payload));\r\n        case SET_SELECTABLE_SQUARES:\r\n            return state.set('selectableSquares', fromJS(action.payload));\r\n        case SET_PLAYER_COLOR:\r\n            return state.setIn(['player', 'color'], action.payload);\r\n        case SET_OPPONENT_COLOR:\r\n            return state.setIn(['opponent', 'color'], action.payload);\r\n        case SET_CURRENT_PLAYER_COLOR:\r\n            return state.setIn(['currentPlayer', 'color'], action.payload);\r\n        case SET_IS_GAME_OVER:\r\n            return state.set('isGameOver', action.payload);\r\n        case SET_OPPONENT_NICKNAME:\r\n            return state.setIn(['opponent', 'username'], action.payload);\r\n        case SET_WINNER_USERNAME:\r\n            return state.set('winnerUsername', action.payload);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { CLOSE_SNACKBAR, REMOVE_SNACKBAR, ENQUEUE_SNACKBAR } from './consts';\r\n\r\nconst initState = {\r\n    notifications: [],\r\n};\r\n\r\nexport default function appReducer(state = initState, action) {\r\n    switch(action.type) {\r\n        case ENQUEUE_SNACKBAR:\r\n            return {\r\n                ...state,\r\n                notifications: [\r\n                    ...state.notifications,\r\n                    {\r\n                        key: action.key,\r\n                        ...action.notification,\r\n                    },\r\n                ],\r\n            };\r\n\r\n        case CLOSE_SNACKBAR:\r\n            return {\r\n                ...state,\r\n                notifications: state.notifications.map(notification => (\r\n                    (action.dismissAll || notification.key === action.key)\r\n                        ? { ...notification, dismissed: true }\r\n                        : { ...notification }\r\n                )),\r\n            };\r\n\r\n        case REMOVE_SNACKBAR:\r\n            return {\r\n                ...state,\r\n                notifications: state.notifications.filter(\r\n                    notification => notification.key !== action.key,\r\n                ),\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","export const SET_HISTORY_GAMES = 'History/SET_HISTORY_GAMES';\r\n","import { fromJS } from 'immutable';\r\nimport { SET_HISTORY_GAMES } from './consts';\r\n\r\nconst initState = fromJS({\r\n    games: []\r\n});\r\n\r\nexport default function gameReducer(state = initState, action) {\r\n    switch (action.type) {\r\n        case SET_HISTORY_GAMES:\r\n            return state.set('games', fromJS(action.payload));\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport AuthReducer from '../containers/Authentication/reducer';\r\nimport LobbyReducer from '../containers/Lobby/reducer';\r\nimport GameReducer from '../containers/Game/reducer';\r\nimport AppReducer from '../containers/App/reducer';\r\nimport HistoryReducer from '../containers/History/reducer';\r\n\r\n\r\nexport default combineReducers({\r\n    form: formReducer,\r\n    auth: AuthReducer,\r\n    lobby: LobbyReducer,\r\n    game: GameReducer,\r\n    app: AppReducer,\r\n    history: HistoryReducer,\r\n});\r\n","export const ENQUEUE_SNACKBAR = 'App/ENQUEUE_SNACKBAR';\r\nexport const CLOSE_SNACKBAR = 'App/CLOSE_SNACKBAR';\r\nexport const REMOVE_SNACKBAR = 'App/REMOVE_SNACKBAR';\r\n","import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\nexport default composeWithDevTools(applyMiddleware(thunk));\r\n","import { createStore } from 'redux';\r\n\r\nimport reducers from './reducers';\r\nimport middlewares from './middlewares';\r\n\r\nconst store = createStore(reducers, middlewares);\r\nexport default store;\r\n","import React from 'react'\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\n\r\nconst PrivateRoute = ({ config: { redirected, redirectUrl }, component: Component, ...rest}) => (\r\n    <Route\r\n        {...rest}\r\n        render={props => redirected ?\r\n            <Redirect to={{pathname: redirectUrl, state: {from: props.location}}} /> :\r\n            <Component {...props} />\r\n        }\r\n    />\r\n);\r\n\r\nexport default PrivateRoute;\r\n","import axios from 'axios';\r\nimport config from '../config.json';\r\n\r\nexport const requests = axios.create({\r\n    baseURL: config.server\r\n});\r\n\r\nexport function setHeader(key, value) {\r\n    requests.defaults.headers[key] = value;\r\n}","import { SET_SELECT_PIECE, SET_BOARD, SET_SELECTABLE_SQUARES, SET_WINNER_USERNAME, SET_OPPONENT_COLOR, SET_PLAYER_COLOR, SET_CURRENT_PLAYER_COLOR, SET_IS_GAME_OVER, SET_OPPONENT_NICKNAME } from \"./consts\";\r\nimport CheckerGame from '../../controllers/CheckerGame';\r\nimport * as AppActions from '../App/actions';\r\nimport GameIOController from \"../../controllers/GameIOController\";\r\n\r\nlet checkerGame;\r\n\r\nconst moveAction = (from, to) => {\r\n    GameIOController.move({from, to});\r\n};\r\n\r\nexport const surrend = () => GameIOController.surrend();\r\n\r\nfunction getOpponentUsername(gameData, opponentColor) {\r\n    opponentColor = opponentColor.toLowerCase();\r\n    return gameData[opponentColor].name;\r\n}\r\n\r\nfunction getOppositeColor(color) {\r\n    return color === 'WHITE' ? 'BLACK' : 'WHITE';\r\n}\r\n\r\nfunction getWinnerUsername(gameData) {\r\n    const winnerColor = (gameData.winnerColor || \"\").toLowerCase();\r\n    if(winnerColor === \"\") {\r\n        return \"\";\r\n    }\r\n    \r\n    const winnerUsername = gameData[winnerColor].name;\r\n    return winnerUsername;\r\n}\r\n\r\nexport const loadGame = (gameData, username) => async (dispatch) => {\r\n    if(gameData.error) {\r\n        dispatch(AppActions.enqueueSnackbar({\r\n            message: `התקבלה שגיאה: ${gameData.error}`,\r\n            options: {\r\n                key: new Date().getTime() + Math.random(),\r\n                variant: 'error'\r\n            },\r\n        }));\r\n        return;\r\n    }\r\n\r\n    const { black } = gameData;\r\n    const userColor = black.name === username ? 'BLACK' : 'WHITE';\r\n    const opponentColor = getOppositeColor(userColor);\r\n    const oponnentUsername = getOpponentUsername(gameData, opponentColor);\r\n    const winnerUsername = getWinnerUsername(gameData);\r\n\r\n    checkerGame = new CheckerGame();\r\n    checkerGame.load(gameData, userColor, moveAction);\r\n\r\n    dispatch({ type: SET_CURRENT_PLAYER_COLOR, payload: checkerGame.getCurrentPlayerColor() });\r\n    dispatch({ type: SET_BOARD, payload: checkerGame.getBoard() });\r\n    dispatch({ type: SET_OPPONENT_COLOR, payload: opponentColor });\r\n    dispatch({ type: SET_PLAYER_COLOR, payload: userColor });\r\n    dispatch({ type: SET_IS_GAME_OVER, payload: checkerGame.isGameOver() });\r\n    dispatch({ type: SET_OPPONENT_NICKNAME, payload: oponnentUsername });\r\n    dispatch({ type: SET_WINNER_USERNAME, payload: winnerUsername });\r\n};\r\n\r\nexport const onSelectSquare = (row, column) => async (dispatch) => {\r\n    checkerGame.selectSquare(row, column);\r\n\r\n    dispatch({ type: SET_SELECT_PIECE, payload: checkerGame.getSelectedSquare() });\r\n    dispatch({ type: SET_SELECTABLE_SQUARES, payload: checkerGame.getSelectableSquares() });\r\n};\r\n","import { requests } from '../libs/HttpClient';\r\nimport config from '../config.json';\r\n\r\nclass AuthController {\r\n    constructor() {\r\n        this.savePlayer = this.setCredentials.bind(this);\r\n        this.login = this.login.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n        this.getCredentials = this.getCredentials.bind(this);\r\n        this.removeCredentials = this.removeCredentials.bind(this);\r\n        this.setCredentials = this.setCredentials.bind(this);\r\n    }\r\n\r\n    async register({ username, password, name }) {\r\n        const body = { username, password, name };\r\n        const req = await requests.post(config.paths.register, body);\r\n\r\n        return req.data;\r\n    }\r\n\r\n    async login({ username, password }) {\r\n        const body = { username, password };\r\n        const req = await requests.post(config.paths.login, body);\r\n\r\n        this.setCredentials(username, password);\r\n\r\n        return req.data;\r\n    }\r\n\r\n    async logout(userId) {\r\n        const req = await requests.get(`${config.paths.logout}${''+userId}`);\r\n        this.removeCredentials();\r\n\r\n        return req.data;\r\n    }\r\n\r\n    isCredentialsSaved() {\r\n        const { username, password } = this.getCredentials();\r\n        const hasUsername = !!username;\r\n        const hasPassword = !!password;\r\n        return hasUsername && hasPassword;\r\n    }\r\n\r\n    getCredentials() {\r\n        return {\r\n            username: localStorage.getItem('username'),\r\n            password: localStorage.getItem('password')\r\n        };\r\n    }\r\n    \r\n    setCredentials(username, password) {\r\n        localStorage.setItem('username', username);\r\n        localStorage.setItem('password', password);\r\n    }\r\n\r\n    removeCredentials() {\r\n        localStorage.removeItem('username');\r\n        localStorage.removeItem('password');\r\n    }\r\n}\r\n\r\nexport default new AuthController();","import SockJS from 'sockjs-client';\r\nimport Stomp from 'stomp-websocket';\r\n\r\nclass SockJsClient {\r\n    constructor() {\r\n        this.sock = null;\r\n        this.stompClient = null;\r\n        this.subscribes = [];\r\n        this.isConnected = false;\r\n\r\n        this.connect = this.connect.bind(this);\r\n        this.onConnect = this.onConnect.bind(this);\r\n        this.disconnect = this.disconnect.bind(this);\r\n        this.send = this.send.bind(this);\r\n    }\r\n\r\n    /*\r\n        url: URL to connect\r\n        username: Username that connects\r\n        subscribes: [\r\n            {\r\n                link: \"/path\",\r\n                handler: (msg: JSON) => {...}\r\n            },\r\n            ...\r\n        ]\r\n    */\r\n    connect(url, username, subscribes) {\r\n        this.subscribes = subscribes;\r\n        this.sock = new SockJS(url);\r\n        this.stompClient = Stomp.over(this.sock);\r\n        this.stompClient.connect({user: username}, this.onConnect);\r\n    }\r\n\r\n    onConnect(frame) {\r\n        this.isConnected = true;\r\n\r\n        // Subscribes\r\n        for(let subscribe of this.subscribes) {\r\n            const { link, handler } = subscribe;\r\n            this.stompClient.subscribe(link, (msg) => handler(JSON.parse(msg.body)));\r\n        }\r\n    }\r\n\r\n    disconnect() {\r\n        if(this.stompClient !== null) {\r\n            this.stompClient.disconnect();\r\n        }\r\n        this.isConnected = false;\r\n    }\r\n\r\n    send(path, data) {\r\n        data = JSON.stringify(data);\r\n        this.stompClient.send(path, {}, data);\r\n    }\r\n}\r\n\r\nexport default SockJsClient;","import SockJSClient from '../libs/SockJsClient';\r\nimport config from '../config.json';\r\n\r\n/*\r\n    API:\r\n     1. Listen to event: GameIOController.bindAction( path, (body) => {...} )\r\n*/\r\nclass GameIOController {\r\n    constructor() {\r\n        // Init vars\r\n        this.sockJSClient = new SockJSClient();\r\n        this.dispatch = null;\r\n        this.bindedActions = {};\r\n        this.player = {};\r\n\r\n        // Binding functions\r\n        this.connect = this.connect.bind(this);\r\n        this.bindAction = this.bindAction.bind(this);\r\n        this.invitePlayer = this.invitePlayer.bind(this);\r\n    }\r\n\r\n    connect(player, dispatch) {\r\n        this.dispatch = dispatch;\r\n        this.player = player;\r\n\r\n        /* Dynamic loading links */\r\n        const links = Object.entries(config.socketListen).map(([key, val]) => val);\r\n        const subscribes = links.map(link => ({\r\n            link,\r\n            handler: this.handleLink(link)\r\n        }));\r\n\r\n        this.sockJSClient.connect(config.socketServer, this.player.username, subscribes);\r\n    }\r\n\r\n    disconnect() {\r\n        this.sockJSClient.disconnect();\r\n    }\r\n\r\n    handleLink(link) {\r\n        if(!(link in this.bindedActions)) { // If not found link's binded function\r\n            return () => console.log(`Recived message from ${link}`);\r\n        }\r\n\r\n        // If found link's binded action\r\n        return this.bindedActions[link];\r\n    }\r\n\r\n    bindAction(on, action) {\r\n        this.bindedActions[on] = action;\r\n    }\r\n\r\n    invitePlayer(player) {\r\n        if(player.username === this.player.username) {\r\n            return; // Player cannot invite himself\r\n        }\r\n\r\n        const data = {\r\n            toUser: player.username\r\n        };\r\n        this.sockJSClient.send(config.paths.invitePlayer, data);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param { from: { row, column }, to: { row, column } } move\r\n     */\r\n    move(move) {\r\n        this.sockJSClient.send(config.paths.move, move);\r\n    }\r\n\r\n    surrend() {\r\n        this.sockJSClient.send(config.paths.surrender);\r\n    }\r\n\r\n    acceptPlayer(playerUsername) {\r\n        const data = {\r\n            toUser: playerUsername\r\n        };\r\n        this.sockJSClient.send(config.paths.acceptPlayer, data);\r\n    }\r\n}\r\n\r\nexport default new GameIOController();","import AuthController from '../../controllers/AuthController';\r\nimport GameIOController from '../../controllers/GameIOController';\r\nimport { SET_USER, LOGOUT } from './consts';\r\n\r\nexport const setUser = (user) => async (dispatch) => {\r\n    dispatch({ type: SET_USER, payload: user });\r\n\r\n    GameIOController.connect(user);\r\n};\r\n\r\nexport const logout = (userid) => async (dispatch) => {\r\n    GameIOController.disconnect();\r\n    await AuthController.logout(userid);\r\n    \r\n    dispatch({ type: LOGOUT });\r\n};\r\n\r\nexport const initLogin = () => async (dispatch) => {\r\n    if (!AuthController.isCredentialsSaved()) {\r\n        return;\r\n    }\r\n\r\n    const { username, password } = AuthController.getCredentials();\r\n    const user = await AuthController.login({ username, password });\r\n    setUser(user)(dispatch);\r\n};\r\n","import React from 'react';\r\nimport { TextField } from '@material-ui/core';\r\n\r\nconst _TextField = ({\r\n    label,\r\n    input,\r\n    meta: { touched, invalid, error },\r\n    ...custom\r\n}) => (\r\n    <TextField\r\n        label={label}\r\n        autoComplete='off'\r\n        placeholder={label}\r\n        error={touched && invalid}\r\n        helperText={touched && error}\r\n        {...input}\r\n        {...custom}\r\n    />\r\n);\r\n\r\nexport default _TextField;","import React from 'react';\r\nimport { Grid, withStyles, Button } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport TextField from '../TextField';\r\nimport styles from './styles';\r\n\r\n\r\nconst validate = (values) => {\r\n    const errors = {};\r\n\r\n    if(!values.username) {\r\n        errors.username = \"חייב לציין שם משתמש\";\r\n    }\r\n    if(!values.password) {\r\n        errors.password = \"חייב לציין סיסמא\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\n\r\nclass LoginForm extends React.Component {\r\n    render() {\r\n        const { handleSubmit, pristine, submitting, error, classes } = this.props;\r\n\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12}>\r\n                        <h1>התחבר</h1>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        {error && <span className={classes.errorMessage}>{error}</span>}\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field component={TextField} label=\"שם משתמש\" name=\"username\" type=\"text\" />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field component={TextField} label=\"סיסמא\" name=\"password\" type=\"password\" />\r\n                    </Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={10}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} lg={6}>\r\n                                <Button disabled={pristine || submitting} type=\"submit\" variant=\"contained\" fullWidth color=\"primary\">\r\n                                    {'התחבר'}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={12} lg={6}>\r\n                                <Button variant=\"outlined\" color=\"primary\" fullWidth component={Link} to='/auth/register'>\r\n                                    {'הירשם'}\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst formConfig = {\r\n    form: 'login',\r\n    validate,\r\n};\r\nexport default withStyles(styles)(reduxForm(formConfig)(LoginForm));","export default (theme) => ({\r\n    errorMessage: {\r\n        color: 'red'\r\n    }\r\n});\r\n","import React from 'react';\r\nimport { Grid, withStyles, Button } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport TextField from '../TextField';\r\nimport styles from './styles';\r\n\r\n\r\nconst validate = (values) => {\r\n    const errors = {};\r\n\r\n    if(!values.username) {\r\n        errors.username = \"חייב לציין שם משתמש\";\r\n    }\r\n    if(!values.password) {\r\n        errors.password = \"חייב לציין סיסמא\";\r\n    }\r\n    if(!values.password_repeat) {\r\n        errors.password_repeat = \"חייב לאמת סיסמה\";\r\n    } else if(values.password_repeat !== values.password) {\r\n        errors.password_repeat = \"אימות סיסמה אינו תקין\";\r\n    }\r\n    if(!values.name) {\r\n        errors.name = \"יש לציין שם מלא\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\n\r\nclass RegisterForm extends React.Component {\r\n    render() {\r\n        const { handleSubmit, pristine, submitting } = this.props;\r\n\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12}>\r\n                        <h1>הירשם</h1>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field component={TextField} label=\"שם משתמש\" name=\"username\" type=\"text\" />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field component={TextField} label=\"סיסמא\" name=\"password\" type=\"password\" />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field component={TextField} label=\"אימות סיסמה\" name=\"password_repeat\" type=\"password\" />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Field component={TextField} name=\"name\" type=\"text\" label=\"שם מלא\" />\r\n                    </Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                    <Grid item xs={10}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} lg={6}>\r\n                                <Button disabled={pristine || submitting} type=\"submit\" variant=\"contained\" fullWidth color=\"primary\">\r\n                                    {'הירשם'}\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={12} lg={6}>\r\n                                <Button variant=\"outlined\" color=\"primary\" fullWidth component={Link} to='/auth/login'>\r\n                                    {'התחבר'}\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst formConfig = {\r\n    form: 'register',\r\n    validate,\r\n};\r\nexport default withStyles(styles)(reduxForm(formConfig)(RegisterForm));","export default (theme) => ({\r\n    \r\n});\r\n","import React from 'react';\r\nimport { Grid, withStyles } from '@material-ui/core';\r\nimport { Route } from 'react-router-dom';\r\nimport { bindActionCreators } from 'redux';\r\nimport { SubmissionError } from 'redux-form';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './actions';\r\nimport AuthController from '../../controllers/AuthController';\r\nimport LoginForm from '../../components/LoginForm';\r\nimport RegisterForm from '../../components/RegisterForm';\r\nimport styles from './styles';\r\n\r\nclass Authentication extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.submitRegister = this.submitRegister.bind(this);\r\n        this.submitLogin = this.submitLogin.bind(this);\r\n    }\r\n\r\n    async submitRegister(data) {\r\n        try {\r\n            const user = await AuthController.register(data);\r\n            this.props.setUser(user);\r\n        } catch(err) {\r\n            throw new SubmissionError({username: \"שם משתמש כבר קיים\"});\r\n        }\r\n    }\r\n\r\n    async submitLogin(data) {\r\n        try {\r\n            const user = await AuthController.login(data);\r\n            this.props.setUser(user);\r\n        } catch(err) {\r\n            throw new SubmissionError({_error: \"פרטים אינם תקינים\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { classes, match } = this.props;\r\n\r\n        return (\r\n            <Grid container spacing={0} direction=\"column\" alignContent=\"center\" justify=\"center\">\r\n                <Grid item xs={10} lg={6} className={classes.authBox}>\r\n                    <Route\r\n                        exact path={`${match.path}/register`}\r\n                        component={() => <RegisterForm onSubmit={this.submitRegister} />}\r\n                    />\r\n                    <Route\r\n                        exact path={`${match.path}/login`}\r\n                        component={() => <LoginForm onSubmit={this.submitLogin} />}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch, props) => bindActionCreators({\r\n    setUser: actions.setUser\r\n}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Authentication));\r\n","export default (theme) => ({\r\n    authBox: {\r\n        width: '100%',\r\n        border: '1px solid #000',\r\n        marginTop: '3%',\r\n        textAlign: 'center',\r\n        paddingBottom: '1%',\r\n        borderRadius: '20px'\r\n    }\r\n});\r\n","import { range, times, isEqual } from 'lodash';\r\n\r\n\r\nexport const BLACK = 'black';\r\nexport const WHITE = 'white';\r\n\r\nexport const parsePlayerColor = (color) => {\r\n    switch (color.toLocaleLowerCase()) {\r\n        case WHITE.toLowerCase():\r\n            return WHITE;\r\n        case BLACK.toLowerCase():\r\n            return BLACK;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport const cleanBoard = () => {\r\n    const board = [];\r\n    for (let i of range(0, 8)) {\r\n        board.push([]);\r\n        times(8, () => board[i].push(null));\r\n    }\r\n    return board;\r\n};\r\n\r\nexport const decreasePosition = (pos) => {\r\n    return {\r\n        row: pos.row - 1,\r\n        column: pos.column - 1\r\n    };\r\n};\r\n\r\nexport const increasePosition = (pos) => {\r\n    return {\r\n        row: pos.row + 1,\r\n        column: pos.column + 1\r\n    };\r\n};\r\n\r\nexport const comparePoints = (p1, p2) => isEqual(p1, p2);\r\n\r\nexport const compareJsonPoints = (p1, p2) => {\r\n    return p1?.row === p2?.row && p1?.column === p2?.column;\r\n};\r\n\r\nexport const jsonPointToArray = (point) => {\r\n    return [point.row, point.column];\r\n};\r\n\r\nexport const arrayPointToJson = (point) => {\r\n    return { row: point[0], column: point[1] };\r\n};\r\n\r\nexport const isPointInList = (points, point) => {\r\n    return points.some(p => comparePoints(p, point));\r\n};\r\n\r\nexport const preprocessLegalMoves = (moves) => {\r\n    return moves.map(move => ({\r\n        ...move,\r\n        from: decreasePosition(move.from),\r\n        to: decreasePosition(move.to)\r\n    }));\r\n}\r\n","import {\r\n    cleanBoard, parsePlayerColor, decreasePosition, isPointInList, increasePosition,\r\n    comparePoints, compareJsonPoints, preprocessLegalMoves, jsonPointToArray, arrayPointToJson\r\n} from './CheckerUtils';\r\n\r\nclass CheckerGame {\r\n    load = (game, playerColor, playerMoveAction) => {\r\n        // Reinit vars\r\n        this._isGameOver = game.gameOver;\r\n        this._winnerColor = game.winnerColor;\r\n        this._playerColor = parsePlayerColor(playerColor);\r\n        this._currentTurn = parsePlayerColor(game.currentPlayerColor);\r\n        this._legalMoves = preprocessLegalMoves(game.legalMovesCollection);\r\n        this._board = cleanBoard();\r\n        this._selectedSquare = [-1, -1];\r\n        this._selectableSquares = [];\r\n        this._playerMoveAction = playerMoveAction;\r\n\r\n        this._loadPieces(game.board.pieces);\r\n    };\r\n\r\n    getBoard = () => this._board;\r\n\r\n    getWinnerColor = () => this._winnerColor;\r\n\r\n    isGameOver = () => this._isGameOver;\r\n\r\n    getSelectableSquares = () => this._selectableSquares;\r\n\r\n    getCurrentPlayerColor = () => this._currentTurn;\r\n\r\n    getSelectedSquare = () => this._selectedSquare;\r\n\r\n    selectSquare = (row, column) => {\r\n        const point = [row, column];\r\n\r\n        if(!this._isPlayerTurn()) {\r\n            return;\r\n        }\r\n\r\n        if(this._isSelectableSquare(point)) {\r\n            this._moveFromTo(this._selectedSquare, point);\r\n\r\n            this._cleanSelectableSquares();\r\n            this._cleanSelectedSquare();\r\n        } else if(this._isCancelingSelected(point)) {\r\n            this._cleanSelectableSquares();\r\n            this._cleanSelectedSquare();\r\n        } else if(this._isSquareOfPlayer(point)) {\r\n            const movesFromPoint = this._allMovesFromPoint(point);\r\n            this._setSelectableSquares(movesFromPoint);\r\n            this._setSelectedSquare(point);\r\n        }\r\n    };\r\n\r\n    _moveFromTo = (currentPoint, targetPoint) => {\r\n        const from = increasePosition(arrayPointToJson(currentPoint));\r\n        const to = increasePosition(arrayPointToJson(targetPoint));\r\n        this._playerMoveAction(from, to);\r\n    };\r\n\r\n    _isSquareOfPlayer = (point) => {\r\n        const [row, column] = point;\r\n        return this._board[row][column]?.color === this._playerColor;\r\n    }\r\n\r\n    _isPlayerTurn = () => this._playerColor === this._currentTurn;\r\n\r\n    _isCancelingSelected = (point) => comparePoints(point, this._selectedSquare);   // Is point equals to selected point\r\n\r\n    _isSelectableSquare = (point) => isPointInList(this._selectableSquares, point);\r\n\r\n    _setSelectedSquare = (value) => this._selectedSquare = value;\r\n\r\n    _cleanSelectedSquare = () => this._selectedSquare = [-1,-1];\r\n\r\n    _setSelectableSquares = (value) => this._selectableSquares = value;\r\n\r\n    _cleanSelectableSquares = () => this._selectableSquares = [];\r\n\r\n    _allMovesFromPoint = (point) => {\r\n        const [row, column] = point;\r\n        point = { row, column };\r\n\r\n        const posMoves = this._legalMoves.filter(move => compareJsonPoints(move.from, point));\r\n        return posMoves.map(move => jsonPointToArray(move.to));\r\n    };\r\n\r\n    _loadPieces = (pieces) => {\r\n        for(let piece of pieces) {\r\n            const position = decreasePosition(piece.position);\r\n            this._board[position.row][position.column] = {\r\n                color: parsePlayerColor(piece.color),\r\n                king: piece.king\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\nexport default CheckerGame;","import { ENQUEUE_SNACKBAR, CLOSE_SNACKBAR, REMOVE_SNACKBAR } from './consts';\r\n\r\nexport const enqueueSnackbar = (notification) => {\r\n    const key = notification.options && notification.options.key;\r\n\r\n    return {\r\n        type: ENQUEUE_SNACKBAR,\r\n        notification: {\r\n            ...notification,\r\n            key: key || new Date().getTime() + Math.random(),\r\n        },\r\n    };\r\n};\r\n\r\nexport const closeSnackbar = key => ({\r\n    type: CLOSE_SNACKBAR,\r\n    dismissAll: !key, // dismiss all if no key has been defined\r\n    key,\r\n});\r\n\r\nexport const removeSnackbar = key => ({\r\n    type: REMOVE_SNACKBAR,\r\n    key,\r\n});\r\n","import React from 'react';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\n\r\nconst defaultStyle = {\r\n    width: '80%',\r\n    borderRadius: '30px',\r\n    marginLeft: '5px',\r\n    height: '80%',\r\n    textAlign: 'center'\r\n};\r\n\r\nconst kingCrownStyle = { color: '#b58500' };\r\n\r\nexport default function Piece({ piece, isSelected, onSelect }) {\r\n    if (piece === null)\r\n        return null;\r\n    \r\n    const color = piece.get('color'); \r\n    const isKing = piece.get('king');\r\n\r\n    const style = { ...defaultStyle };\r\n    style.background = (color === 'black') ? '#000' : '#fff';\r\n    style.border = isSelected ? '3px solid red' : null;\r\n\r\n    return <div style={style} onClick={onSelect}>\r\n        {isKing && <AddCircleOutlineIcon style={kingCrownStyle} />}\r\n    </div>;\r\n};","import React from 'react';\r\nimport { withStyles } from '@material-ui/core';\r\nimport classnames from 'classnames';\r\nimport styles from './styles';\r\nimport Piece from './piece';\r\n\r\nconst GetSquareColor = (row, column) => {\r\n    if (row % 2 === 0) {\r\n        if (column % 2 === 0)\r\n            return 'white';\r\n        return 'black';\r\n    } else {\r\n        if (column % 2 === 0)\r\n            return 'black';\r\n        return 'white';\r\n    }\r\n};\r\n\r\nconst isSelectableSquare = (row, column, selectableSquares) => {\r\n    return selectableSquares.filter(([x, y]) => x === row && y === column).size > 0;\r\n};\r\n\r\nconst GameBoard = ({ classes, board, selectableSquares, selected, onSelectSquare }) => {\r\n    return (\r\n        <table className={classes.board}>\r\n            {board.map((squares, row) => (\r\n                <tr key={row}>\r\n                    {squares.map((square, column) => (\r\n                        <td\r\n                            key={column}\r\n                            className={classnames(\r\n                                classes.square, classes[GetSquareColor(row, column)],\r\n                                { [classes.optionSquare]: isSelectableSquare(row, column, selectableSquares) }\r\n                            )}\r\n                            onClick={() => onSelectSquare({ row, column })}\r\n                        >\r\n                            <Piece\r\n                                piece={square}\r\n                                isSelected={selected.get(0) === row && selected.get(1) === column}\r\n                            />\r\n                        </td>\r\n                    ))}\r\n                </tr>\r\n            ))}\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default withStyles(styles)(GameBoard);","export default (theme) => ({\r\n    board: {\r\n        direction: 'ltr',\r\n        border: '1px solid #000',\r\n        borderCollapse: 'collapse',\r\n        borderSpacing: 0,\r\n    },\r\n    square: {\r\n        width: '60px',\r\n        height: '60px',\r\n        cursor: 'pointer'\r\n    },\r\n    black: {\r\n        background: 'green',\r\n        color: 'white'\r\n    },\r\n    white: {\r\n        background: 'white'\r\n    },\r\n    optionSquare: {\r\n        background: '#03ff03',\r\n        opacity: 0.8\r\n    },\r\n});\r\n","import React from 'react';\r\n\r\nconst PlayerColor = ({ color }) => {\r\n    const style = {\r\n        background: color || '#cccccc',\r\n        font: '16px bold',\r\n        color: 'red',\r\n        textAlign: 'center',\r\n        width: '20px',\r\n        height: '20px',\r\n        border: '1px solid #000'\r\n    };\r\n\r\n    return (\r\n    <div style={style}>{color === null && <>X</>}</div>\r\n    );\r\n};\r\n\r\n\r\nexport default PlayerColor;\r\n","import React, { Fragment } from 'react';\r\nimport { Table, TableBody, TableCell, TableRow, Divider, Button } from '@material-ui/core';\r\nimport PlayerColor from './PlayerColor';\r\n\r\nconst GameInfo = ({ opponent, player, currentPlayerColor, surrend }) => {\r\n    const onSurrend = () => {\r\n        if(window.confirm('בטוח אתה רוצה להיכנע?')) {\r\n            surrend();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Table>\r\n                <TableBody>\r\n                    <TableRow>\r\n                        <TableCell>צבע שחקן</TableCell>\r\n                        <TableCell><PlayerColor color={player.get('color')} /></TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell>תור השחקן</TableCell>\r\n                        <TableCell><PlayerColor color={currentPlayerColor} /></TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n            <Divider />\r\n            <Table>\r\n                <TableBody>\r\n                    <TableRow>\r\n                        <TableCell>יריב</TableCell>\r\n                        <TableCell>{opponent.get('username')}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell>צבע יריב</TableCell>\r\n                        <TableCell><PlayerColor color={opponent.get('color')} /></TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n            <Divider />\r\n            <Table>\r\n                <TableBody>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            <Button variant=\"contained\" onClick={onSurrend} color=\"primary\">היכנע</Button>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default GameInfo;","import React from 'react';\r\nimport { Modal, withStyles } from '@material-ui/core';\r\n\r\nconst styles = (theme) => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n});\r\n\r\nconst GameOver = ({ classes, open, winnerUsername, onClose }) => {\r\n    const message = winnerUsername !== '' ? `The winner is ${winnerUsername}` : `Draw!`;\r\n\r\n    return (\r\n        <Modal open={open} className={classes.modal} onClose={onClose}>\r\n            <div className={classes.paper}>\r\n                <h2 id=\"transition-modal-title\">Game over</h2>\r\n                <p id=\"transition-modal-description\">\r\n                    {message}\r\n                </p>\r\n                <p><button onClick={onClose}>Exit</button></p>\r\n            </div>\r\n        </Modal>\r\n    );\r\n}\r\n\r\n\r\nexport default withStyles(styles)(GameOver);\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Grid, withStyles } from '@material-ui/core';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styles from './styles';\r\nimport * as actions from './actions';\r\nimport GameBoard from '../../components/GameBoard';\r\nimport GameInfo from '../../components/GameInfo';\r\nimport GameOver from '../../components/GameOver';\r\n\r\nconst Game = ({ classes, history }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const board = useSelector(state => state.game.get('board'));\r\n    const selectableSquares = useSelector(state => state.game.get('selectableSquares'));\r\n    const selected = useSelector(state => state.game.get('selected'));\r\n    const opponent = useSelector(state => state.game.get('opponent'));\r\n    const isGameOver = useSelector(state => state.game.get('isGameOver'));\r\n    const currentPlayer = useSelector(state => state.game.get('currentPlayer'));\r\n    const player = useSelector(state => state.game.get('player'));\r\n    const winnerUsername = useSelector(state => state.game.get('winnerUsername'));\r\n    const onSelectSquare = ({row, column}) => dispatch(actions.onSelectSquare(row, column));\r\n    const surrend = () => actions.surrend();\r\n    const goToLobby = () => history.push('/');\r\n\r\n    return (\r\n        <Grid container spacing={0}>\r\n            <GameOver open={isGameOver} winnerUsername={winnerUsername} onClose={goToLobby} />\r\n            <Grid item xs={3} className={classes.game_sidebar}>\r\n                <h1>Game</h1>\r\n                \r\n                <GameInfo\r\n                    opponent={opponent} player={player}\r\n                    surrend={surrend} currentPlayerColor={currentPlayer.get('color')}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={1}></Grid>\r\n            <Grid item xs={6}>\r\n                <div className={classes.gameContainer}>\r\n                    <GameBoard\r\n                        board={board} selectableSquares={selectableSquares} selected={selected}\r\n                        onSelectSquare={onSelectSquare}\r\n                    />\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default withRouter(withStyles(styles)(Game));","export default (theme) => ({\r\n    game_sidebar: {\r\n        textAlign: 'center'\r\n    },\r\n    gameContainer: {\r\n        marginTop: '20px'\r\n    }\r\n});\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useSnackbar } from 'notistack';\r\nimport { removeSnackbar } from './actions';\r\n\r\nlet displayed = [];\r\n\r\nconst Notifier = () => {\r\n    const dispatch = useDispatch();\r\n    const notifications = useSelector(store => store.app.notifications || []);\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    const storeDisplayed = (id) => {\r\n        displayed = [...displayed, id];\r\n    };\r\n\r\n    const removeDisplayed = (id) => {\r\n        displayed = [...displayed.filter(key => id !== key)];\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\r\n            if (dismissed) {\r\n                // dismiss snackbar using notistack\r\n                closeSnackbar(key);\r\n                return;\r\n            }\r\n\r\n            // do nothing if snackbar is already displayed\r\n            if (displayed.includes(key)) return;\r\n\r\n            // display snackbar using notistack\r\n            enqueueSnackbar(message, {\r\n                key,\r\n                ...options,\r\n                onClose: (event, reason, myKey) => {\r\n                    if (options.onClose) {\r\n                        options.onClose(event, reason, myKey);\r\n                    }\r\n                },\r\n                onExited: (event, myKey) => {\r\n                    // removen this snackbar from redux store\r\n                    dispatch(removeSnackbar(myKey));\r\n                    removeDisplayed(myKey);\r\n                },\r\n            });\r\n\r\n            // keep track of snackbars that we've displayed\r\n            storeDisplayed(key);\r\n        });\r\n    }, [notifications, closeSnackbar, enqueueSnackbar, dispatch]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default Notifier;\r\n","import React from 'react';\r\nimport { List, ListItem, ListItemText, ListItemIcon, withStyles } from '@material-ui/core';\r\nimport classNames from 'classnames';\r\nimport { Person } from '@material-ui/icons';\r\nimport styles from './styles';\r\n\r\nconst getPlayerInfo = (user) => `${user.get('username')} (${user.get('score')})`;\r\n\r\nconst iconClassName = (classes, available) => classNames({\r\n    [classes.iconAvailable]: available,\r\n    [classes.iconUnavailable]: !available\r\n});\r\n\r\nconst UsersLists = ({ classes, users, onSelect }) => (\r\n    <List component=\"nav\" aria-labelledby=\"nested-list-subheader\">\r\n        {users.map((user, index) => (\r\n            <ListItem disabled={!user.get('available')} button onClick={() => onSelect(user.toJS())} className={classes.lobbyItem} key={index}>\r\n                <ListItemIcon>\r\n                    <Person className={iconClassName(classes, user.get('available'))} />\r\n                </ListItemIcon>\r\n                <ListItemText primary={getPlayerInfo(user)} />\r\n            </ListItem>\r\n        ))}\r\n    </List>\r\n);\r\n\r\nexport default withStyles(styles)(UsersLists);\r\n","export default (theme) => ({\r\n    lobbyItem: {\r\n        textAlign: 'right'\r\n    },\r\n    iconAvailable: {\r\n        color: 'green'\r\n    },\r\n    iconUnavailable: {\r\n        color: 'red'\r\n    }\r\n});\r\n","import { requests } from '../libs/HttpClient';\r\nimport config from '../config.json';\r\n\r\nclass UsersController {\r\n    async fetch_all_users() {\r\n        const req = await requests.get(config.paths.allPlayers);\r\n        return req.data;\r\n    }\r\n\r\n    async get_current_game(userName) {\r\n        const req = await requests.get(config.paths.currentGame+userName);\r\n        return req.data;\r\n    }\r\n\r\n    async get_history(userId) {\r\n        const req = await requests.get(config.paths.getHistory+userId);\r\n        return req.data;\r\n    }\r\n}\r\n\r\nexport default new UsersController();\r\n","import UsersController from '../../controllers/UsersController';\r\nimport GameIOController from '../../controllers/GameIOController';\r\nimport { SET_ALL_USERS } from './consts';\r\n\r\nexport const fetchAllPlayers = () => async (dispatch) => {\r\n    const users = await UsersController.fetch_all_users();\r\n    dispatch({ type: SET_ALL_USERS, payload: users });\r\n};\r\n\r\nexport const invitePlayer = (player) => async(dispatch) => {\r\n    GameIOController.invitePlayer(player);\r\n};\r\n\r\nexport const acceptPlayer = (player) => async(dispatch) => {\r\n    GameIOController.acceptPlayer(player);\r\n};","import React, { Fragment } from 'react';\r\nimport { Grid, withStyles, Button } from '@material-ui/core';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport UsersLists from '../../components/UsersList';\r\nimport GameIOController from '../../controllers/GameIOController';\r\nimport UsersController from '../../controllers/UsersController';\r\nimport * as actions from './actions';\r\nimport * as AppActions from '../App/actions';\r\nimport * as GameActions from '../Game/actions';\r\nimport styles from './styles';\r\nimport config from '../../config.json';\r\n\r\nclass Lobby extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onSelectUser = this.onSelectUser.bind(this);\r\n        this.recivedInvitation = this.recivedInvitation.bind(this);\r\n        this.gameStart = this.gameStart.bind(this);\r\n        this.checkIfAlreadyInGame = this.checkIfAlreadyInGame.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.props.fetchAllPlayers();\r\n    }\r\n\r\n    componentDidMount() {\r\n        GameIOController.bindAction(config.socketListen.gameInvitation, this.recivedInvitation);\r\n        GameIOController.bindAction(config.socketListen.gameStart, this.gameStart);\r\n        this.checkIfAlreadyInGame();\r\n    }\r\n\r\n    async checkIfAlreadyInGame() {\r\n        const username = this.props.loggedUser.get('username');\r\n        UsersController.get_current_game(username)\r\n            .then((game) => {\r\n                this.gameStart(game);\r\n            });\r\n    }\r\n\r\n    gameStart(game) {\r\n        const { loadGame, history, loggedUser } = this.props;\r\n        loadGame(game, loggedUser.get('username'));\r\n        history.push('/game');\r\n    }\r\n\r\n    recivedInvitation(invitation) {\r\n        const { fromUser } = invitation;\r\n        const { classes, closeSnackbar, acceptPlayer } = this.props;\r\n\r\n        const action = key => (\r\n            <Fragment>\r\n                <Button\r\n                    className={classes.acceptInvitationButton}\r\n                    onClick={() => { acceptPlayer(fromUser); closeSnackbar(key); }}\r\n                >\r\n                    {`קבל`}\r\n                </Button>\r\n                <Button onClick={() => closeSnackbar(key)}>\r\n                    {`בטל`}\r\n                </Button>\r\n            </Fragment>\r\n        );\r\n\r\n        this.props.enqueueSnackbar({\r\n            message: `הזמנה למשחק מאת ${fromUser}`,\r\n            options: {\r\n                key: new Date().getTime() + Math.random(),\r\n                variant: 'success',\r\n                action,\r\n            },\r\n        });\r\n    }\r\n\r\n    onSelectUser(user) {\r\n        const action = key => (\r\n            <Button style={{color:'white'}} onClick={() => this.props.closeSnackbar(key)}>\r\n                {`אישור`}\r\n            </Button>\r\n        );\r\n        if (user.username === this.props.loggedUser.get('username')) {\r\n            this.props.enqueueSnackbar({\r\n                message: 'לא ניתן להזמין את עצמך למשחק',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'outlined',\r\n                    action\r\n                }\r\n            });\r\n        }\r\n\r\n        this.props.invitePlayer(user);\r\n    }\r\n\r\n    render() {\r\n        const { classes, allUsers } = this.props;\r\n\r\n        return (\r\n            <Grid container spacing={0} direction=\"column\" alignContent=\"center\" justify=\"center\">\r\n                <Grid item xs={10} lg={6} className={classes.lobbyBox}>\r\n                    <UsersLists users={allUsers} onSelect={this.onSelectUser} />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    allUsers: state.lobby.get('allUsers'),\r\n    loggedUser: state.auth.get('user')\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch, props) => bindActionCreators({\r\n    fetchAllPlayers: actions.fetchAllPlayers,\r\n    invitePlayer: actions.invitePlayer,\r\n    acceptPlayer: actions.acceptPlayer,\r\n    enqueueSnackbar: AppActions.enqueueSnackbar,\r\n    closeSnackbar: AppActions.closeSnackbar,\r\n    loadGame: GameActions.loadGame,\r\n}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(withStyles(styles)(Lobby)));\r\n","export default (theme) => ({\r\n    lobbyBox: {\r\n        width: '100%',\r\n        border: '1px solid #000',\r\n        marginTop: '3%',\r\n        textAlign: 'center',\r\n        paddingBottom: '1%',\r\n        borderRadius: '20px'\r\n    },\r\n    acceptInvitationButton: {\r\n        fontWeight: 'bold'\r\n    },\r\n});\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { withStyles, AppBar, Toolbar, Typography, Button } from '@material-ui/core';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styles from './styles';\r\nimport * as authActions from '../Authentication/actions';\r\n\r\nconst Navbar = ({ classes }) => {\r\n    const dispatch = useDispatch();\r\n    const isLogin = useSelector(state => state.auth.get('isLogin'));\r\n    const user = useSelector(state => state.auth.get('user'));\r\n    const logout = () => dispatch(authActions.logout(user.get('id')));\r\n\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    {'Checkers'}\r\n                </Typography>\r\n                {\r\n                    isLogin &&\r\n                    <>\r\n                        <Typography variant=\"inherit\">{user.get('username')}</Typography>\r\n                        <Button color=\"inherit\" component={Link} to='/history'>History</Button>\r\n                        <Button color=\"inherit\" component={Link} to='/'>Lobby</Button>\r\n                        <Button color=\"inherit\" onClick={logout}>Logout</Button>\r\n                    </>\r\n                }\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nexport default withStyles(styles)(Navbar);","export default (theme) => ({\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport { Grid, Table, TableHead, TableRow, TableCell, TableBody } from '@material-ui/core';\r\nimport PlayerColor from '../GameInfo/PlayerColor';\r\n\r\nconst getPlayerInfo = (game, color) => `${game.getIn([color,'username'])}`;\r\nconst gameDate = (game) => moment(game.get('timestamp')).format(\"DD/MM/YYYY HH:mm:ss\");\r\n\r\nfunction HistoryItem({ games }) {\r\n    return (\r\n        <Grid container justify=\"center\" alignContent=\"center\">\r\n            <Grid item>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Score in game</TableCell>\r\n                            <TableCell>White</TableCell>\r\n                            <TableCell>Black</TableCell>\r\n                            <TableCell>Winner</TableCell>\r\n                            <TableCell>Date</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {games.map(game => (    \r\n                            <TableRow key={game.get('gameId')}>\r\n                                <TableCell>{game.get('score')}</TableCell>\r\n                                <TableCell>{getPlayerInfo(game, 'white')}</TableCell>\r\n                                <TableCell>{getPlayerInfo(game, 'black')}</TableCell>\r\n                                <TableCell><PlayerColor color={game.get('winner')} /></TableCell>\r\n                                <TableCell>{gameDate(game)}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default HistoryItem;","import React, { useEffect } from 'react';\r\nimport { Grid, withStyles } from '@material-ui/core';\r\nimport styles from './styles';\r\nimport * as actions from './actions';\r\nimport HistoryItem from '../../components/HistoryItem';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction History({ classes }) {\r\n    const dispatch = useDispatch();\r\n    const games = useSelector(state => state.history.get('games'));\r\n    const userId = useSelector(state => state.auth.getIn(['user', 'id']));\r\n\r\n    useEffect(() => {\r\n        dispatch(actions.fetchHistoryGames(userId));\r\n    }, [dispatch, userId]);\r\n\r\n    return (\r\n        <Grid container alignContent=\"center\" justify=\"center\">\r\n            <Grid item lg={10}>\r\n                <Grid container spacing={2}>\r\n                    <HistoryItem games={games} />\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(History);","export default (theme) => ({\r\n});\r\n","import { SET_HISTORY_GAMES } from './consts';\r\nimport UsersController from '../../controllers/UsersController';\r\n\r\nexport const fetchHistoryGames = (userId) => async (dispatch) => {\r\n    const games = await UsersController.get_history(userId);\r\n    dispatch({ type: SET_HISTORY_GAMES, payload: games });\r\n};\r\n","import React from 'react';\r\nimport { Switch, HashRouter as Router } from 'react-router-dom';\r\nimport { withStyles } from '@material-ui/core';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport styles from './styles';\r\nimport PrivateRoute from '../../components/PrivateRoute';\r\nimport * as authActions from '../Authentication/actions';\r\nimport Authentication from '../Authentication';\r\nimport Game from '../Game';\r\nimport Notifier from './notifier';\r\nimport Lobby from '../Lobby';\r\nimport Navbar from '../Navbar';\r\nimport History from '../History';\r\n\r\nclass App extends React.Component {\r\n    componentWillMount() {\r\n        this.props.initLogin();\r\n    }\r\n\r\n    render() {\r\n        const { isLogin, classes } = this.props;\r\n        const loginRouteConfig = {\r\n            redirectUrl: '/auth/login',\r\n            redirected: !isLogin\r\n        };\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <Notifier />\r\n                <Router>\r\n                    <Navbar />\r\n                    <Switch>\r\n                        <PrivateRoute\r\n                            path=\"/auth\" component={Authentication}\r\n                            config={{ redirectUrl: '/', redirected: isLogin }}\r\n                        />\r\n                        <PrivateRoute path=\"/game\" component={Game} config={loginRouteConfig} />\r\n                        <PrivateRoute path=\"/history\" component={History} config={loginRouteConfig} />\r\n                        <PrivateRoute path=\"/\" component={Lobby} config={loginRouteConfig} />\r\n                    </Switch>\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isLogin: state.auth.get('isLogin')\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch, props) => bindActionCreators({\r\n    initLogin: authActions.initLogin\r\n}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(App));\r\n","export default (theme) => ({\r\n    root: {\r\n        flexGrow: 1\r\n    }\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport CssBaseLine from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { SnackbarProvider } from 'notistack';\nimport * as serviceWorker from './serviceWorker';\nimport theme from './theme';\nimport './index.css';\nimport store from './store';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <CssBaseLine />\n        <SnackbarProvider maxSnack={3} hideIconVariant preventDuplicate anchorOrigin={{horizontal:'right',vertical:'bottom'}}>\n          <App />\n        </SnackbarProvider>\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}