package com.checkers.server.controller;

import com.checkers.server.model.GameResult;
import com.checkers.server.model.User;
import com.checkers.server.utils.EncryptUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.security.NoSuchAlgorithmException;

/**
 * User Controller for API calls related to user (authentication)
 */
@Controller // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /api (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping(path="/auth/register", consumes = { "application/json" })
	public @ResponseBody User addNewUser (@RequestBody User userNew, HttpServletResponse response) throws NoSuchAlgorithmException {
		// @ResponseBody means the returned String is the response, not a view name

		//check userName is unique
		if(userRepository.existsByUsername(userNew.getUsername())){
			response.setStatus( HttpServletResponse.SC_BAD_REQUEST  );
			return null;
		}

		User n = new User();
		n.setName(userNew.getName());
		n.setPassword(EncryptUtil.hashPassword(userNew.getPassword()));
		n.setUsername(userNew.getUsername());
		userRepository.save(n);
		response.setStatus( HttpServletResponse.SC_OK  );
		return userRepository.findByUsername(userNew.getUsername()).get(0);
	}

	@GetMapping(path="/players")
	@ResponseStatus(value = HttpStatus.OK)
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@PostMapping(path="/auth/login", consumes = { "application/json" })
	public @ResponseBody User verifyUser(@RequestBody User userToVerify, HttpServletResponse response) throws NoSuchAlgorithmException {
		// This returns a JSON or XML with the users
		if(userRepository.existsByUsername(userToVerify.getUsername())) {
			User user = userRepository.findByUsername(userToVerify.getUsername()).get(0);
			if(EncryptUtil.hashPassword(userToVerify.getPassword()).equals(user.getPassword())){
				response.setStatus( HttpServletResponse.SC_OK  );
				user.setAvailable(true);
				userRepository.save(user);
				return user;
			}
		}
		response.setStatus( HttpServletResponse.SC_UNAUTHORIZED  );
		return null;
	}

	@GetMapping(path="/logout/{userId}")
	@ResponseStatus(value = HttpStatus.OK)
	public void logout(@PathVariable(value="userId") int userId) {
		User user = userRepository.findById(userId);
		user.setAvailable(false);
		userRepository.save(user);
	}
}
